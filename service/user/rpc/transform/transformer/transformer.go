// Code generated by goctl. DO NOT EDIT!
// Source: transform.proto

package transformer

import (
	"context"

	"github.com/realjf/go-zero-demo/service/user/rpc/transform/transform"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq     = transform.LoginReq
	LoginResp    = transform.LoginResp
	RegisterReq  = transform.RegisterReq
	RegisterResp = transform.RegisterResp
	UserInfoReq  = transform.UserInfoReq
	UserInfoResp = transform.UserInfoResp

	Transformer interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	}

	defaultTransformer struct {
		cli zrpc.Client
	}
)

func NewTransformer(cli zrpc.Client) Transformer {
	return &defaultTransformer{
		cli: cli,
	}
}

func (m *defaultTransformer) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := transform.NewTransformerClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultTransformer) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := transform.NewTransformerClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultTransformer) GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := transform.NewTransformerClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}
